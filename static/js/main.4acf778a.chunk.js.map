{"version":3,"sources":["logo.svg","App.js","Authorization/Login.js","serviceWorker.js","index.js"],"names":["module","exports","App","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","height","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","marginTop","submit","Boolean","window","location","hostname","match","ReactDOM","render","classes","Grid","container","component","className","CssBaseline","item","xs","sm","md","Paper","elevation","square","Avatar","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","type","FormControlLabel","control","Checkbox","value","Button","Box","mt","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,2KCyB5BC,I,2HCVf,SAASC,IACL,OACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,MAAM,UACvD,kBACD,kBAACC,EAAA,EAAD,CAAMF,MAAM,UAAUG,KAAK,4BAA3B,gBAEI,KACP,IAAIC,MAAOC,cACX,KAKL,IAAMC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQ,SAEZC,MAAO,CACHC,gBAAiB,0CACjBC,iBAAkB,YAClBC,eAAgB,QAChBC,mBAAoB,UAExBC,MAAO,CACHC,OAAQT,EAAMU,QAAQ,EAAG,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJL,OAAQT,EAAMU,QAAQ,GACtBK,gBAAiBf,EAAMgB,QAAQC,UAAUC,MAE7CC,KAAM,CACFC,MAAO,OACPC,UAAWrB,EAAMU,QAAQ,IAE7BY,OAAQ,CACJb,OAAQT,EAAMU,QAAQ,EAAG,EAAG,QCzChBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,mBFkDD,WACX,IAAMC,EAAUhC,IAEhB,OACI,kBAACiC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAAOC,UAAWJ,EAAQ7B,MACpD,kBAACkC,EAAA,EAAD,MACA,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAI,EAAOC,GAAI,EAAGC,GAAI,EAAGL,UAAWJ,EAAQ3B,QAC3D,kBAAC4B,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGN,UAAWO,IAAOC,UAAW,EAAGC,QAAM,GACvE,yBAAKR,UAAWJ,EAAQtB,OACpB,kBAACmC,EAAA,EAAD,CAAQT,UAAWJ,EAAQhB,QAC3B,kBAAC,IAAD,OAEA,kBAACxB,EAAA,EAAD,CAAY2C,UAAU,KAAK1C,QAAQ,MAAnC,WAGA,0BAAM2C,UAAWJ,EAAQX,KAAMyB,YAAU,GAC7C,kBAACC,EAAA,EAAD,CACAtD,QAAQ,WACRkB,OAAO,SACPqC,UAAQ,EACRC,WAAS,EACTC,GAAG,WACHC,MAAM,mBACNC,KAAK,WACLC,aAAa,MACbC,WAAS,IAET,kBAACP,EAAA,EAAD,CACAtD,QAAQ,WACRkB,OAAO,SACPqC,UAAQ,EACRC,WAAS,EACTC,GAAG,QACHC,MAAM,gBACNC,KAAK,QACLC,aAAa,UAEb,kBAACN,EAAA,EAAD,CACAtD,QAAQ,WACRkB,OAAO,SACPqC,UAAQ,EACRC,WAAS,EACTG,KAAK,WACLD,MAAM,WACNI,KAAK,WACLL,GAAG,WACHG,aAAa,qBAET,kBAACG,EAAA,EAAD,CACJC,QAAS,kBAACC,EAAA,EAAD,CAAUC,MAAM,WAAWjE,MAAM,YAC1CyD,MAAM,gBAEF,kBAACS,EAAA,EAAD,CACJL,KAAK,SACLN,WAAS,EACTxD,QAAQ,YACRC,MAAM,UACN0C,UAAWJ,EAAQR,QALf,WASJ,kBAACS,EAAA,EAAD,CAAMC,WAAS,GACf,kBAACD,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,IAEb,kBAACN,EAAA,EAAD,CAAMK,MAAI,KAGN,kBAACuB,EAAA,EAAD,CAAKC,GAAI,GACT,kBAACvE,EAAD,aEtHQ,MAAWwE,SAASC,eAAe,SD0H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4acf778a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'Copyright Â© '}\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n    </Link>{' '}\n    {new Date().getFullYear()}\n    {'.'}\n</Typography>\n);\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100vh',\n    },\n    image: {\n        backgroundImage: 'url(https://source.unsplash.com/random)',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n    },\n    paper: {\n        margin: theme.spacing(8, 4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport default function SignInSide() {\n    const classes = useStyles();\n\n    return (\n        <Grid container component=\"main\" className={classes.root}>\n        <CssBaseline />\n        <Grid item xs={false} sm={4} md={7} className={classes.image} />\n    <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n    <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n        <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n        Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n    <TextField\n    variant=\"outlined\"\n    margin=\"normal\"\n    required\n    fullWidth\n    id=\"hostname\"\n    label=\"Magento Hostname\"\n    name=\"hostname\"\n    autoComplete=\"off\"\n    autoFocus\n    />\n    <TextField\n    variant=\"outlined\"\n    margin=\"normal\"\n    required\n    fullWidth\n    id=\"email\"\n    label=\"Email Address\"\n    name=\"email\"\n    autoComplete=\"email\"\n    />\n    <TextField\n    variant=\"outlined\"\n    margin=\"normal\"\n    required\n    fullWidth\n    name=\"password\"\n    label=\"Password\"\n    type=\"password\"\n    id=\"password\"\n    autoComplete=\"current-password\"\n        />\n        <FormControlLabel\n    control={<Checkbox value=\"remember\" color=\"primary\" />}\n    label=\"Remember me\"\n        />\n        <Button\n    type=\"submit\"\n    fullWidth\n    variant=\"contained\"\n    color=\"primary\"\n    className={classes.submit}\n        >\n        Sign In\n    </Button>\n    <Grid container>\n    <Grid item xs>\n    </Grid>\n    <Grid item>\n        </Grid>\n        </Grid>\n        <Box mt={5}>\n        <Copyright />\n        </Box>\n        </form>\n        </div>\n        </Grid>\n        </Grid>\n);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './Authorization/Login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}